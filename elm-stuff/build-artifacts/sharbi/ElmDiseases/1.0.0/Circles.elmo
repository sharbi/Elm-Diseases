Elm.Circles = Elm.Circles || {};
Elm.Circles.make = function (_elm) {
   "use strict";
   _elm.Circles = _elm.Circles || {};
   if (_elm.Circles.values)
   return _elm.Circles.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Circles",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Lazy = Elm.Html.Lazy.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Node = Elm.Node.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var delta = A2($Signal.map,
   function (t) {
      return t / 1500;
   },
   $Time.fps(10));
   var linePosition = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: $Basics.toFloat(_v0._0) - 500
                   ,_1: 550 - $Basics.toFloat(_v0._1)};}
         _U.badCase($moduleName,
         "on line 223, column 4 to 50");
      }();
   };
   var buttonStyle = F2(function (bool1,
   bool2) {
      return function () {
         var color = bool1 ? "#9c27b0" : bool2 ? "#D32F2F" : "#2196F3";
         return _L.fromArray([{ctor: "_Tuple2"
                              ,_0: "background-color"
                              ,_1: color}
                             ,{ctor: "_Tuple2"
                              ,_0: "display"
                              ,_1: "inline"}
                             ,{ctor: "_Tuple2"
                              ,_0: "color"
                              ,_1: "#fff"}
                             ,{ctor: "_Tuple2"
                              ,_0: "box-shadow"
                              ,_1: "0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15)"}
                             ,{ctor: "_Tuple2"
                              ,_0: "height"
                              ,_1: "30px"}
                             ,{ctor: "_Tuple2"
                              ,_0: "margin"
                              ,_1: "0 auto"}]);
      }();
   });
   var viewLinks = F2(function (m,
   _v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return function () {
                 var _ = A2($List.filter,
                 function (_v8) {
                    return function () {
                       switch (_v8.ctor)
                       {case "_Tuple2":
                          return _U.eq(_v8._0,_v4._1);}
                       _U.badCase($moduleName,
                       "on line 211, column 54 to 70");
                    }();
                 },
                 m.nodes);
                 var node2 = function () {
                    switch (_.ctor)
                    {case "::": switch (_._0.ctor)
                         {case "_Tuple2":
                            switch (_._1.ctor)
                              {case "[]": return _._0._1;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 211, column 22 to 79");
                 }();
                 var _ = A2($List.filter,
                 function (_v17) {
                    return function () {
                       switch (_v17.ctor)
                       {case "_Tuple2":
                          return _U.eq(_v17._0,_v4._0);}
                       _U.badCase($moduleName,
                       "on line 210, column 55 to 71");
                    }();
                 },
                 m.nodes);
                 var node1 = function () {
                    switch (_.ctor)
                    {case "::": switch (_._0.ctor)
                         {case "_Tuple2":
                            switch (_._1.ctor)
                              {case "[]": return _._0._1;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 210, column 23 to 80");
                 }();
                 return A3($Graphics$Collage.collage,
                 1000,
                 1000,
                 _L.fromArray([A2($Graphics$Collage.traced,
                 _U.replace([["width",7]],
                 $Graphics$Collage.defaultLine),
                 A2($Graphics$Collage.segment,
                 linePosition(node1.location),
                 linePosition(node2.location)))]));
              }();}
         _U.badCase($moduleName,
         "between lines 210 and 213");
      }();
   });
   var styleForLine = _L.fromArray([{ctor: "_Tuple2"
                                    ,_0: "height"
                                    ,_1: "inherit"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "width"
                                    ,_1: "inherit"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "z-index"
                                    ,_1: "-2"}]);
   var viewListLinks = function (m) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.style(styleForLine)]),
      _L.fromArray([$Html.fromElement($Graphics$Element.layers(A2($List.map,
      viewLinks(m),
      m.links)))]));
   };
   var stylesForShapes = _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: "height"
                                       ,_1: "1000px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "width"
                                       ,_1: "1000px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "position"
                                       ,_1: "relative"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "z-index"
                                       ,_1: "1"}]);
   var drawStyle = _L.fromArray([{ctor: "_Tuple2"
                                 ,_0: "height"
                                 ,_1: "1000px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "width"
                                 ,_1: "1000px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "position"
                                 ,_1: "relative"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "z-index"
                                 ,_1: "1"}]);
   var Input = function (a) {
      return {_: {},point: a};
   };
   var userInput = $Signal.sampleOn(delta)(A2($Signal.map,
   Input,
   $Mouse.position));
   var update = F2(function (action,
   m) {
      return function () {
         switch (action.ctor)
         {case "Create":
            return function () {
                 var newLink = A2($List._op["::"],
                 {ctor: "_Tuple2"
                 ,_0: m.storedDisease
                 ,_1: m.id},
                 m.links);
                 var newModel = function (num) {
                    return A2($List._op["::"],
                    {ctor: "_Tuple2"
                    ,_0: m.id
                    ,_1: A2($Node.init,
                    action._1,
                    num)},
                    m.nodes);
                 };
                 return function () {
                    switch (action._0)
                    {case 1:
                       return _U.replace([["id"
                                          ,m.id + 1]
                                         ,["nodes",newModel(action._0)]
                                         ,["editDisease"
                                          ,$Basics.not(m.editDisease)]
                                         ,["editSymptoms"
                                          ,$Basics.not(m.editSymptoms)]
                                         ,["storedDisease",m.id]],
                         m);
                       case 2: return _U.replace([["id"
                                                  ,m.id + 1]
                                                 ,["nodes",newModel(action._0)]
                                                 ,["links",newLink]],
                         m);
                       case 4: return m;}
                    _U.badCase($moduleName,
                    "between lines 93 and 110");
                 }();
              }();
            case "Edit":
            return _U.replace([["editDisease"
                               ,$Basics.not(m.editDisease)]],
              m);
            case "NoOp": return m;
            case "Remove":
            return _U.replace([["nodes"
                               ,A2($List.filter,
                               function (_v33) {
                                  return function () {
                                     switch (_v33.ctor)
                                     {case "_Tuple2":
                                        return !_U.eq(_v33._0,
                                          action._0);}
                                     _U.badCase($moduleName,
                                     "on line 111, column 51 to 63");
                                  }();
                               },
                               m.nodes)]],
              m);
            case "Update":
            return function () {
                 var updateNode = function (_v37) {
                    return function () {
                       switch (_v37.ctor)
                       {case "_Tuple2":
                          return _U.eq(_v37._0,
                            action._0) ? {ctor: "_Tuple2"
                                         ,_0: _v37._0
                                         ,_1: A2($Node.update,
                                         action._1,
                                         _v37._1)} : {ctor: "_Tuple2"
                                                     ,_0: _v37._0
                                                     ,_1: _v37._1};}
                       _U.badCase($moduleName,
                       "between lines 83 and 85");
                    }();
                 };
                 return _U.replace([["nodes"
                                    ,A2($List.map,
                                    updateNode,
                                    m.nodes)]],
                 m);
              }();}
         _U.badCase($moduleName,
         "between lines 78 and 136");
      }();
   });
   var layout = F2(function (color,
   _v41) {
      return function () {
         switch (_v41.ctor)
         {case "_Tuple2":
            return _L.fromArray([{ctor: "_Tuple2"
                                 ,_0: "border-radius"
                                 ,_1: "1000px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "width"
                                 ,_1: "150px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "border"
                                 ,_1: "0"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "text-align"
                                 ,_1: "center"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "line-height"
                                 ,_1: "100px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "color"
                                 ,_1: "#fff"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "height"
                                 ,_1: "150px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "cursor"
                                 ,_1: "pointer"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "background-color"
                                 ,_1: color}
                                ,{ctor: "_Tuple2"
                                 ,_0: "display"
                                 ,_1: "inline"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "position"
                                 ,_1: "absolute"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "top"
                                 ,_1: A2($Basics._op["++"],
                                 $Basics.toString(_v41._0 - 50),
                                 "px")}
                                ,{ctor: "_Tuple2"
                                 ,_0: "left"
                                 ,_1: A2($Basics._op["++"],
                                 $Basics.toString(_v41._1 - 75),
                                 "px")}
                                ,{ctor: "_Tuple2"
                                 ,_0: "font-size"
                                 ,_1: "19px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "font-weight"
                                 ,_1: "bold"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "box-shadow"
                                 ,_1: "0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15)"}]);}
         _U.badCase($moduleName,
         "between lines 58 and 74");
      }();
   });
   var Remove = function (a) {
      return {ctor: "Remove"
             ,_0: a};
   };
   var Edit = {ctor: "Edit"};
   var buttonBar = F3(function (address,
   m,
   input) {
      return function () {
         var editButton = A2($Html.button,
         _L.fromArray([$Html$Attributes.style(A2(buttonStyle,
                      m.editDisease,
                      m.editSymptoms))
                      ,A2($Html$Events.onClick,
                      address,
                      Edit)]),
         _L.fromArray([$Html.text("Create New Disease")]));
         return A2($Html.header,
         _L.fromArray([$Html$Attributes.id("header")]),
         _L.fromArray([A2($Html.section,
         _L.fromArray([]),
         _L.fromArray([editButton]))]));
      }();
   });
   var Create = F2(function (a,b) {
      return {ctor: "Create"
             ,_0: a
             ,_1: b};
   });
   var Update = F2(function (a,b) {
      return {ctor: "Update"
             ,_0: a
             ,_1: b};
   });
   var viewNode = F2(function (address,
   _v45) {
      return function () {
         switch (_v45.ctor)
         {case "_Tuple2":
            return function () {
                 var context = A2($Node.Context,
                 A2($Signal.forwardTo,
                 address,
                 Update(_v45._0)),
                 A2($Signal.forwardTo,
                 address,
                 $Basics.always(Remove(_v45._0))));
                 return A2($Node.view,
                 context,
                 _v45._1);
              }();}
         _U.badCase($moduleName,
         "between lines 198 and 202");
      }();
   });
   var viewListNodes = F2(function (address,
   m) {
      return A2($Html.div,
      _L.fromArray([]),
      A2($List.map,
      viewNode(address),
      m.nodes));
   });
   var combinedSpace = F3(function (address,
   m,
   input) {
      return function () {
         var nodeType = m.editDisease ? 1 : m.editSymptoms ? 2 : 4;
         var loc = input.point;
         return A2($Html.div,
         _L.fromArray([A2($Html$Events.onClick,
                      address,
                      A2(Create,nodeType,loc))
                      ,$Html$Attributes.style(stylesForShapes)]),
         _L.fromArray([A2($Html.section,
         _L.fromArray([]),
         _L.fromArray([A2(viewListNodes,
                      address,
                      m)
                      ,viewListLinks(m)]))]));
      }();
   });
   var view = F3(function (address,
   m,
   input) {
      return A2($Html.body,
      _L.fromArray([$Html$Attributes.$class("disease-map-wrapper")
                   ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: "position"
                                                         ,_1: "absolute"}]))]),
      _L.fromArray([A2($Html.section,
      _L.fromArray([$Html$Attributes.id("disease-map-app")]),
      _L.fromArray([A4($Html$Lazy.lazy3,
                   buttonBar,
                   address,
                   A2($Debug.watch,"model",m),
                   input)
                   ,A4($Html$Lazy.lazy3,
                   combinedSpace,
                   address,
                   m,
                   input)]))]));
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var initialModel = {_: {}
                      ,editDisease: false
                      ,editSymptoms: false
                      ,id: 0
                      ,links: _L.fromArray([])
                      ,nodes: _L.fromArray([])
                      ,storedDisease: 0};
   var model = A3($Signal.foldp,
   update,
   initialModel,
   actions.signal);
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   view(actions.address),
   model),
   userInput);
   var Model = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,editDisease: b
             ,editSymptoms: c
             ,id: d
             ,links: e
             ,nodes: a
             ,storedDisease: f};
   });
   _elm.Circles.values = {_op: _op
                         ,Model: Model
                         ,initialModel: initialModel
                         ,NoOp: NoOp
                         ,Update: Update
                         ,Create: Create
                         ,Edit: Edit
                         ,Remove: Remove
                         ,actions: actions
                         ,layout: layout
                         ,update: update
                         ,Input: Input
                         ,drawStyle: drawStyle
                         ,view: view
                         ,buttonBar: buttonBar
                         ,stylesForShapes: stylesForShapes
                         ,styleForLine: styleForLine
                         ,combinedSpace: combinedSpace
                         ,viewListNodes: viewListNodes
                         ,viewNode: viewNode
                         ,viewListLinks: viewListLinks
                         ,viewLinks: viewLinks
                         ,buttonStyle: buttonStyle
                         ,linePosition: linePosition
                         ,main: main
                         ,delta: delta
                         ,userInput: userInput
                         ,model: model};
   return _elm.Circles.values;
};