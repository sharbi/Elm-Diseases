Elm.Circles = Elm.Circles || {};
Elm.Circles.make = function (_elm) {
   "use strict";
   _elm.Circles = _elm.Circles || {};
   if (_elm.Circles.values)
   return _elm.Circles.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Circles",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Lazy = Elm.Html.Lazy.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var delta = A2($Signal.map,
   function (t) {
      return t / 1500;
   },
   $Time.fps(10));
   var inputLayout = _L.fromArray([{ctor: "_Tuple2"
                                   ,_0: "background-color"
                                   ,_1: "inherit"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "border"
                                   ,_1: "0"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "border-radius"
                                   ,_1: "1000px"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "color"
                                   ,_1: "#fff"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "type"
                                   ,_1: "hidden"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "width"
                                   ,_1: "inherit"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "text-align"
                                   ,_1: "center"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "font-weight"
                                   ,_1: "bold"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "font-size"
                                   ,_1: "16px"}
                                  ,{ctor: "_Tuple2"
                                   ,_0: "line-height"
                                   ,_1: "145px"}]);
   var removeButton = _L.fromArray([{ctor: "_Tuple2"
                                    ,_0: "color"
                                    ,_1: "#000"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "height"
                                    ,_1: "12px"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "z-index"
                                    ,_1: "2"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "position"
                                    ,_1: "absolute"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "float"
                                    ,_1: "right"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "top"
                                    ,_1: "0px"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "right"
                                    ,_1: "0px"}]);
   var buttonStyle = F2(function (bool1,
   bool2) {
      return function () {
         var color = bool1 ? "#9c27b0" : bool2 ? "#D32F2F" : "#2196F3";
         return _L.fromArray([{ctor: "_Tuple2"
                              ,_0: "background-color"
                              ,_1: color}
                             ,{ctor: "_Tuple2"
                              ,_0: "display"
                              ,_1: "inline"}
                             ,{ctor: "_Tuple2"
                              ,_0: "color"
                              ,_1: "#fff"}
                             ,{ctor: "_Tuple2"
                              ,_0: "box-shadow"
                              ,_1: "0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15)"}
                             ,{ctor: "_Tuple2"
                              ,_0: "height"
                              ,_1: "30px"}
                             ,{ctor: "_Tuple2"
                              ,_0: "margin"
                              ,_1: "0 auto"}]);
      }();
   });
   var linePosition = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: $Basics.toFloat(_v0._1) - 450
                   ,_1: $Basics.toFloat(_v0._0)};}
         _U.badCase($moduleName,
         "on line 222, column 4 to 30");
      }();
   };
   var viewNode = function (nodeModel) {
      return function () {
         var layout = F2(function (color,
         _v4) {
            return function () {
               switch (_v4.ctor)
               {case "_Tuple2":
                  return _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: "border-radius"
                                       ,_1: "1000px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "width"
                                       ,_1: "150px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "border"
                                       ,_1: "0"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "text-align"
                                       ,_1: "center"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "line-height"
                                       ,_1: "100px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "color"
                                       ,_1: "#fff"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "height"
                                       ,_1: "150px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "cursor"
                                       ,_1: "pointer"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "background-color"
                                       ,_1: color}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "display"
                                       ,_1: "inline"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "position"
                                       ,_1: "absolute"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "top"
                                       ,_1: A2($Basics._op["++"],
                                       $Basics.toString(_v4._1 - 125),
                                       "px")}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "left"
                                       ,_1: A2($Basics._op["++"],
                                       $Basics.toString(_v4._0 - 75),
                                       "px")}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "font-size"
                                       ,_1: "19px"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "font-weight"
                                       ,_1: "bold"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "box-shadow"
                                       ,_1: "0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15)"}]);}
               _U.badCase($moduleName,
               "between lines 197 and 213");
            }();
         });
         return function () {
            var _v8 = nodeModel.nodeType;
            switch (_v8.ctor)
            {case "Disease":
               return A2($Html.div,
                 _L.fromArray([$Html$Attributes.style(A2(layout,
                 "#9c27b0",
                 nodeModel.location))]),
                 _L.fromArray([]));
               case "Symptom":
               return A2($Html.div,
                 _L.fromArray([$Html$Attributes.style(A2(layout,
                 "#D32F2F",
                 nodeModel.location))]),
                 _L.fromArray([]));}
            _U.badCase($moduleName,
            "between lines 215 and 218");
         }();
      }();
   };
   var styleForLine = _L.fromArray([{ctor: "_Tuple2"
                                    ,_0: "height"
                                    ,_1: "inherit"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "width"
                                    ,_1: "inherit"}
                                   ,{ctor: "_Tuple2"
                                    ,_0: "z-index"
                                    ,_1: "-2"}]);
   var stylesForShapes = _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: "height"
                                       ,_1: "inherit"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "width"
                                       ,_1: "inherit"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "position"
                                       ,_1: "absolute"}
                                      ,{ctor: "_Tuple2"
                                       ,_0: "z-index"
                                       ,_1: "1"}]);
   var drawStyle = _L.fromArray([{ctor: "_Tuple2"
                                 ,_0: "height"
                                 ,_1: "1000px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "width"
                                 ,_1: "1000px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "position"
                                 ,_1: "relative"}]);
   var Input = function (a) {
      return {_: {},point: a};
   };
   var userInput = $Signal.sampleOn(delta)(A2($Signal.map,
   Input,
   $Mouse.position));
   var layout = F2(function (color,
   _v9) {
      return function () {
         switch (_v9.ctor)
         {case "_Tuple2":
            return _L.fromArray([{ctor: "_Tuple2"
                                 ,_0: "border-radius"
                                 ,_1: "1000px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "width"
                                 ,_1: "150px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "border"
                                 ,_1: "0"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "text-align"
                                 ,_1: "center"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "line-height"
                                 ,_1: "100px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "color"
                                 ,_1: "#fff"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "height"
                                 ,_1: "150px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "cursor"
                                 ,_1: "pointer"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "background-color"
                                 ,_1: color}
                                ,{ctor: "_Tuple2"
                                 ,_0: "display"
                                 ,_1: "inline"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "position"
                                 ,_1: "absolute"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "top"
                                 ,_1: A2($Basics._op["++"],
                                 $Basics.toString(_v9._0 - 50),
                                 "px")}
                                ,{ctor: "_Tuple2"
                                 ,_0: "left"
                                 ,_1: A2($Basics._op["++"],
                                 $Basics.toString(_v9._1 - 75),
                                 "px")}
                                ,{ctor: "_Tuple2"
                                 ,_0: "font-size"
                                 ,_1: "19px"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "font-weight"
                                 ,_1: "bold"}
                                ,{ctor: "_Tuple2"
                                 ,_0: "box-shadow"
                                 ,_1: "0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15)"}]);}
         _U.badCase($moduleName,
         "between lines 72 and 88");
      }();
   });
   var Remove = function (a) {
      return {ctor: "Remove"
             ,_0: a};
   };
   var Edit = {ctor: "Edit"};
   var buttonBar = F3(function (address,
   m,
   input) {
      return function () {
         var editButton = A2($Html.button,
         _L.fromArray([$Html$Attributes.style(A2(buttonStyle,
                      m.editDisease,
                      m.editSymptoms))
                      ,A2($Html$Events.onClick,
                      address,
                      Edit)]),
         _L.fromArray([$Html.text("Create New Disease")]));
         return A2($Html.header,
         _L.fromArray([$Html$Attributes.id("header")]),
         _L.fromArray([A2($Html.section,
         _L.fromArray([]),
         _L.fromArray([editButton
                      ,$Html.fromElement($Graphics$Element.show(input.point))]))]));
      }();
   });
   var Create = F2(function (a,b) {
      return {ctor: "Create"
             ,_0: a
             ,_1: b};
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var Empty = {ctor: "Empty"};
   var Symptom = {ctor: "Symptom"};
   var Disease = {ctor: "Disease"};
   var combinedSpace = F3(function (address,
   m,
   input) {
      return function () {
         var nodeType = m.editDisease ? Disease : m.editSymptoms ? Symptom : Empty;
         var loc = input.point;
         return A2($Html.div,
         _L.fromArray([A2($Html$Events.onClick,
                      address,
                      A2(Create,nodeType,loc))
                      ,$Html$Attributes.style(drawStyle)]),
         $Array.toList(A2($Array.map,
         viewNode,
         m.nodes)));
      }();
   });
   var view = F3(function (address,
   m,
   input) {
      return A2($Html.body,
      _L.fromArray([$Html$Attributes.$class("disease-map-wrapper")
                   ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: "position"
                                                         ,_1: "absolute"}]))]),
      _L.fromArray([A2($Html.section,
      _L.fromArray([$Html$Attributes.id("disease-map-app")]),
      _L.fromArray([A4($Html$Lazy.lazy3,
                   buttonBar,
                   address,
                   A2($Debug.watch,"model",m),
                   input)
                   ,A4($Html$Lazy.lazy3,
                   combinedSpace,
                   address,
                   m,
                   input)]))]));
   });
   var initialModel = {_: {}
                      ,editDisease: false
                      ,editSymptoms: false
                      ,id: 0
                      ,links: _L.fromArray([])
                      ,name: ""
                      ,nodes: $Array.empty};
   var nodeInit = F3(function (id,
   loc,
   nodeType) {
      return {_: {}
             ,id: id
             ,location: loc
             ,nodeType: nodeType
             ,title: ""};
   });
   var update = F2(function (action,
   m) {
      return function () {
         switch (action.ctor)
         {case "Create":
            return function () {
                 var newModel = function (nodeType) {
                    return _U.replace([["id"
                                       ,m.id + 1]
                                      ,["nodes"
                                       ,A2($Array.push,
                                       A3(nodeInit,
                                       m.id,
                                       action._1,
                                       nodeType),
                                       m.nodes)]
                                      ,["editDisease"
                                       ,$Basics.not(m.editDisease)]
                                      ,["editSymptoms"
                                       ,$Basics.not(m.editSymptoms)]],
                    m);
                 };
                 return function () {
                    switch (action._0.ctor)
                    {case "Disease":
                       return newModel(action._0);
                       case "Empty": return m;
                       case "Symptom":
                       return newModel(action._0);}
                    _U.badCase($moduleName,
                    "between lines 108 and 129");
                 }();
              }();
            case "Edit":
            return _U.replace([["editDisease"
                               ,$Basics.not(m.editDisease)]],
              m);
            case "NoOp": return m;}
         _U.badCase($moduleName,
         "between lines 92 and 138");
      }();
   });
   var model = A3($Signal.foldp,
   update,
   initialModel,
   actions.signal);
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   view(actions.address),
   model),
   userInput);
   var Model = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,editDisease: b
             ,editSymptoms: c
             ,id: e
             ,links: f
             ,name: d
             ,nodes: a};
   });
   var NodeModel = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,id: b
             ,location: c
             ,nodeType: d
             ,title: a};
   });
   _elm.Circles.values = {_op: _op
                         ,NodeModel: NodeModel
                         ,Model: Model
                         ,nodeInit: nodeInit
                         ,initialModel: initialModel
                         ,Disease: Disease
                         ,Symptom: Symptom
                         ,Empty: Empty
                         ,NoOp: NoOp
                         ,Create: Create
                         ,Edit: Edit
                         ,Remove: Remove
                         ,actions: actions
                         ,layout: layout
                         ,update: update
                         ,Input: Input
                         ,drawStyle: drawStyle
                         ,view: view
                         ,buttonBar: buttonBar
                         ,stylesForShapes: stylesForShapes
                         ,styleForLine: styleForLine
                         ,combinedSpace: combinedSpace
                         ,viewNode: viewNode
                         ,linePosition: linePosition
                         ,buttonStyle: buttonStyle
                         ,removeButton: removeButton
                         ,inputLayout: inputLayout
                         ,main: main
                         ,delta: delta
                         ,userInput: userInput
                         ,model: model};
   return _elm.Circles.values;
};